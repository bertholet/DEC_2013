#pragma once
#include "MODEL.h"
#include "oneForm.h"

class application_vfDesign
{
private:
	bool adaptToBorder;
	float weight;
	float srcsink_flow;
	float fieldLength;

	//helper method
	void add_star1_d0_srcflow_to_b( floatVector &b, 
		std::vector<int> & sink_verts, 
		std::vector<int> & source_verts, 
		float srcsink_flow, 
		MODEL & model );

public:
	application_vfDesign(void);
	~application_vfDesign(void);
	//specifiy if the matrices should be adapted in order to
	//allow free boundary flows
	void setAdaptToBorder(bool what);
	//specify the weight directional constraints have
	void setGuideFieldWeight(float wght);
	//specify a factor by which the guidefield is scaled
	void setGuideFieldScale( float constraintLength );	
	//set how much flow is generated by a singe source or sink
	void setSourceSinkFlow(float flow);



	//compute the specified vector field.
	void computeField(MODEL & m, 
		std::vector<int> & source_verts,
		std::vector<int> & sink_verts,
		std::vector<int> & constrainedEdges,
		std::vector<float> & edgeConstraints,
		oneForm & target,
		bool directional = false);
};

